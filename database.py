from sqlalchemy import create_engine, event
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import DisconnectionError, OperationalError
from sqlalchemy.pool import Pool
import os
import logging
from dotenv import load_dotenv
from contextlib import contextmanager
import time

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Carrega o .env
load_dotenv()

# Configura√ß√£o da URL do banco
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    DB_DIALECT = os.getenv("DB_DIALECT", "postgresql")
    DB_USER = os.getenv("DB_USER")
    DB_PASSWORD = os.getenv("DB_PASSWORD")
    DB_HOST = os.getenv("DB_HOST", "localhost")
    DB_PORT = os.getenv("DB_PORT", "5432")
    DB_NAME = os.getenv("DB_NAME")
    
    if not all([DB_USER, DB_PASSWORD, DB_NAME]):
        raise ValueError("‚ùå Vari√°veis de banco de dados ausentes no .env!")
    
    DATABASE_URL = (
        f"{DB_DIALECT}://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
        "?sslmode=require&connect_timeout=30"
    )

# Configura√ß√µes otimizadas para Render
ENGINE_CONFIG = {
    # Pool de conex√µes otimizado
    'pool_size': 5,           # N√∫mero base de conex√µes
    'max_overflow': 10,       # Conex√µes extras quando necess√°rio
    'pool_timeout': 30,       # Timeout para obter conex√£o do pool
    'pool_recycle': 3600,     # Recicla conex√µes a cada 1 hora
    'pool_pre_ping': True,    # Testa conex√µes antes de usar
    
    # Configura√ß√µes de reconex√£o
    'connect_args': {
        'sslmode': 'require',
        'connect_timeout': 30,
        'keepalives': 1,
        'keepalives_idle': 30,
        'keepalives_interval': 10,
        'keepalives_count': 5,
        'application_name': 'MyApp'  # Facilita debugging no Render
    },
    
    # Echo SQL queries em desenvolvimento
    'echo': os.getenv('DEBUG') == 'True'
}

# Cria o engine com configura√ß√µes otimizadas
engine = create_engine(DATABASE_URL, **ENGINE_CONFIG)

# Event listener para reconex√£o autom√°tica
@event.listens_for(Pool, "connect")
def set_sqlite_pragma(dbapi_connection, connection_record):
    """Configura par√¢metros da conex√£o"""
    logger.info("Nova conex√£o estabelecida com o banco")

@event.listens_for(Pool, "checkout")
def ping_connection(dbapi_connection, connection_record, connection_proxy):
    """Testa conex√£o antes de usar (forma compat√≠vel com psycopg2)"""
    try:
        cursor = dbapi_connection.cursor()
        cursor.execute("SELECT 1")
        cursor.close()
    except Exception as e:
        logger.warning(f"Conex√£o inv√°lida detectada: {e}")
        raise DisconnectionError()

# SessionLocal com configura√ß√µes otimizadas
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
    expire_on_commit=False  # Evita problemas com objetos ap√≥s commit
)

class DatabaseManager:
    """Gerenciador de banco com retry logic e tratamento de erros"""
    
    def __init__(self):
        self.max_retries = 3
        self.retry_delay = 2
    
    @contextmanager
    def get_session(self):
        """Context manager para sess√µes com retry logic"""
        session = None
        for attempt in range(self.max_retries):
            try:
                session = SessionLocal()
                yield session
                session.commit()
                break
                
            except (OperationalError, DisconnectionError) as e:
                logger.error(f"Erro de conex√£o (tentativa {attempt + 1}): {e}")
                
                if session:
                    session.rollback()
                    session.close()
                    session = None
                
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay * (2 ** attempt))  # Exponential backoff
                    logger.info(f"Tentando reconectar em {self.retry_delay * (2 ** attempt)}s...")
                else:
                    logger.error("M√°ximo de tentativas excedido")
                    raise e
                    
            except Exception as e:
                logger.error(f"Erro n√£o relacionado √† conex√£o: {e}")
                if session:
                    session.rollback()
                raise e
                
            finally:
                if session:
                    session.close()
    
    def execute_with_retry(self, operation, *args, **kwargs):
        """Executa opera√ß√£o com retry logic"""
        for attempt in range(self.max_retries):
            try:
                with self.get_session() as session:
                    return operation(session, *args, **kwargs)
                    
            except (OperationalError, DisconnectionError) as e:
                logger.error(f"Erro na opera√ß√£o (tentativa {attempt + 1}): {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)
                else:
                    raise e
    
    def test_connection(self) -> bool:
        """Testa se a conex√£o est√° funcionando"""
        try:
            with self.get_session() as session:
                result = session.execute("SELECT 1").scalar()
                return result == 1
        except Exception as e:
            logger.error(f"Teste de conex√£o falhou: {e}")
            return False
    
    def get_connection_info(self) -> dict:
        """Retorna informa√ß√µes sobre o pool de conex√µes"""
        try:
            pool = engine.pool
            return {
                'pool_size': pool.size(),
                'checked_in': pool.checkedin(),
                'checked_out': pool.checkedout(),
                'overflow': pool.overflow(),
                'invalid': pool.invalid()
            }
        except Exception as e:
            logger.error(f"Erro ao obter info do pool: {e}")
            return {}

# Inst√¢ncia global do gerenciador
db_manager = DatabaseManager()

# Fun√ß√µes de conveni√™ncia
def get_session():
    """Retorna context manager para sess√£o"""
    return db_manager.get_session()

def test_connection() -> bool:
    """Testa conex√£o com banco"""
    return db_manager.test_connection()

def get_connection_info() -> dict:
    """Informa√ß√µes do pool de conex√µes"""
    return db_manager.get_connection_info()

def execute_with_retry(operation, *args, **kwargs):
    """Executa opera√ß√£o com retry"""
    return db_manager.execute_with_retry(operation, *args, **kwargs)

# Depend√™ncia para FastAPI (se estiver usando)
def get_db():
    """Depend√™ncia do FastAPI para inje√ß√£o de sess√£o"""
    with get_session() as session:
        yield session

# Fun√ß√£o para criar todas as tabelas
def create_tables():
    """Cria todas as tabelas definidas nos models"""
    try:
        from models import Base  # Importe seus models aqui
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tabelas criadas/verificadas com sucesso")
    except ImportError:
        logger.warning("‚ö†Ô∏è  Arquivo models.py n√£o encontrado")
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar tabelas: {e}")

# Exemplo de uso e teste
if __name__ == "__main__":
    print("üîÑ Testando conex√£o com banco de dados...")
    
    # Teste de conex√£o
    if test_connection():
        print("‚úÖ Conex√£o com banco funcionando!")
        
        # Informa√ß√µes do pool
        pool_info = get_connection_info()
        print(f"üìä Pool info: {pool_info}")
        
        # Exemplo de uso da sess√£o
        def exemplo_query(session):
            # Substitua por uma query real do seu projeto
            result = session.execute("SELECT current_database(), version()").fetchone()
            return result
        
        try:
            resultado = execute_with_retry(exemplo_query)
            print(f"üóÑÔ∏è  Database: {resultado[0]}")
            print(f"üêò PostgreSQL Version: {resultado[1][:50]}...")
        except Exception as e:
            print(f"‚ùå Erro na query de exemplo: {e}")
            
        # Tentar criar tabelas
        create_tables()
        
    else:
        print("‚ùå Falha na conex√£o com banco de dados")
        print("üîç Verifique:")
        print("   - Se o DATABASE_URL est√° correto")
        print("   - Se o servi√ßo no Render est√° ativo")
        print("   - Se n√£o ultrapassou limite de conex√µes")
